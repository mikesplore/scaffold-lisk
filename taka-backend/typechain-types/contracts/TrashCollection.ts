/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TrashCollection {
  export type CollectionEventStruct = {
    user: AddressLike;
    station: AddressLike;
    trashType: string;
    weight: BigNumberish;
    reward: BigNumberish;
    timestamp: BigNumberish;
    imageHash: string;
  };

  export type CollectionEventStructOutput = [
    user: string,
    station: string,
    trashType: string,
    weight: bigint,
    reward: bigint,
    timestamp: bigint,
    imageHash: string
  ] & {
    user: string;
    station: string;
    trashType: string;
    weight: bigint;
    reward: bigint;
    timestamp: bigint;
    imageHash: string;
  };

  export type TrashTypeStruct = {
    name: string;
    rewardPerKg: BigNumberish;
    active: boolean;
  };

  export type TrashTypeStructOutput = [
    name: string,
    rewardPerKg: bigint,
    active: boolean
  ] & { name: string; rewardPerKg: bigint; active: boolean };
}

export interface TrashCollectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTrashType"
      | "allCollections"
      | "authorizeStation"
      | "authorizedStations"
      | "collectTrash"
      | "collectTrashBatch"
      | "getAllStations"
      | "getAllTrashTypes"
      | "getGlobalStats"
      | "getRecentCollections"
      | "getStationStats"
      | "getTrashType"
      | "getTrashTypeDistribution"
      | "getUserCollectionHistory"
      | "getUserStats"
      | "owner"
      | "pause"
      | "paused"
      | "registeredUsers"
      | "renounceOwnership"
      | "revokeStation"
      | "stationAddresses"
      | "stationTotalCollected"
      | "takaToken"
      | "totalRewardsDistributed"
      | "totalTrashCollected"
      | "totalUsers"
      | "transferOwnership"
      | "trashTypeNames"
      | "trashTypeTotal"
      | "trashTypes"
      | "unpause"
      | "updateTrashType"
      | "userCollections"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "StationAuthorized"
      | "StationRevoked"
      | "TrashCollected"
      | "TrashTypeAdded"
      | "TrashTypeUpdated"
      | "Unpaused"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTrashType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeStation",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedStations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTrash",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTrashBatch",
    values: [AddressLike[], string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTrashTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStationStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrashType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrashTypeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollectionHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stationAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stationTotalCollected",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "takaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewardsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTrashCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trashTypeNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trashTypeTotal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "trashTypes", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTrashType",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollections",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrashType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTrash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTrashBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTrashTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStationStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrashType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrashTypeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollectionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationTotalCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTrashCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trashTypeNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trashTypeTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trashTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTrashType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollections",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StationAuthorizedEvent {
  export type InputTuple = [station: AddressLike, name: string];
  export type OutputTuple = [station: string, name: string];
  export interface OutputObject {
    station: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StationRevokedEvent {
  export type InputTuple = [station: AddressLike];
  export type OutputTuple = [station: string];
  export interface OutputObject {
    station: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrashCollectedEvent {
  export type InputTuple = [
    user: AddressLike,
    station: AddressLike,
    trashType: string,
    weight: BigNumberish,
    reward: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    station: string,
    trashType: string,
    weight: bigint,
    reward: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    station: string;
    trashType: string;
    weight: bigint;
    reward: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrashTypeAddedEvent {
  export type InputTuple = [trashType: string, rewardPerKg: BigNumberish];
  export type OutputTuple = [trashType: string, rewardPerKg: bigint];
  export interface OutputObject {
    trashType: string;
    rewardPerKg: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrashTypeUpdatedEvent {
  export type InputTuple = [
    trashType: string,
    newRewardPerKg: BigNumberish,
    active: boolean
  ];
  export type OutputTuple = [
    trashType: string,
    newRewardPerKg: bigint,
    active: boolean
  ];
  export interface OutputObject {
    trashType: string;
    newRewardPerKg: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrashCollection extends BaseContract {
  connect(runner?: ContractRunner | null): TrashCollection;
  waitForDeployment(): Promise<this>;

  interface: TrashCollectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTrashType: TypedContractMethod<
    [trashType: string, rewardPerKg: BigNumberish],
    [void],
    "nonpayable"
  >;

  allCollections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        user: string;
        station: string;
        trashType: string;
        weight: bigint;
        reward: bigint;
        timestamp: bigint;
        imageHash: string;
      }
    ],
    "view"
  >;

  authorizeStation: TypedContractMethod<
    [station: AddressLike, stationName: string],
    [void],
    "nonpayable"
  >;

  authorizedStations: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  collectTrash: TypedContractMethod<
    [
      user: AddressLike,
      trashType: string,
      weightInGrams: BigNumberish,
      imageHash: string
    ],
    [void],
    "nonpayable"
  >;

  collectTrashBatch: TypedContractMethod<
    [
      users: AddressLike[],
      trashTypes_: string[],
      weights: BigNumberish[],
      imageHashes: string[]
    ],
    [void],
    "nonpayable"
  >;

  getAllStations: TypedContractMethod<[], [string[]], "view">;

  getAllTrashTypes: TypedContractMethod<[], [string[]], "view">;

  getGlobalStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalTrashCollected: bigint;
        _totalRewardsDistributed: bigint;
        _totalUsers: bigint;
        totalStations: bigint;
        totalTrashTypes: bigint;
      }
    ],
    "view"
  >;

  getRecentCollections: TypedContractMethod<
    [limit: BigNumberish],
    [TrashCollection.CollectionEventStructOutput[]],
    "view"
  >;

  getStationStats: TypedContractMethod<
    [station: AddressLike],
    [[bigint, boolean] & { totalCollected: bigint; authorized: boolean }],
    "view"
  >;

  getTrashType: TypedContractMethod<
    [trashType: string],
    [TrashCollection.TrashTypeStructOutput],
    "view"
  >;

  getTrashTypeDistribution: TypedContractMethod<
    [],
    [[string[], bigint[]] & { types: string[]; amounts: bigint[] }],
    "view"
  >;

  getUserCollectionHistory: TypedContractMethod<
    [user: AddressLike],
    [TrashCollection.CollectionEventStructOutput[]],
    "view"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalCollections: bigint;
        totalWeight: bigint;
        totalEarned: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registeredUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeStation: TypedContractMethod<
    [station: AddressLike],
    [void],
    "nonpayable"
  >;

  stationAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stationTotalCollected: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  takaToken: TypedContractMethod<[], [string], "view">;

  totalRewardsDistributed: TypedContractMethod<[], [bigint], "view">;

  totalTrashCollected: TypedContractMethod<[], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trashTypeNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  trashTypeTotal: TypedContractMethod<[arg0: string], [bigint], "view">;

  trashTypes: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean] & {
        name: string;
        rewardPerKg: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateTrashType: TypedContractMethod<
    [trashType: string, newRewardPerKg: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  userCollections: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        user: string;
        station: string;
        trashType: string;
        weight: bigint;
        reward: bigint;
        timestamp: bigint;
        imageHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTrashType"
  ): TypedContractMethod<
    [trashType: string, rewardPerKg: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allCollections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        user: string;
        station: string;
        trashType: string;
        weight: bigint;
        reward: bigint;
        timestamp: bigint;
        imageHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizeStation"
  ): TypedContractMethod<
    [station: AddressLike, stationName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedStations"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "collectTrash"
  ): TypedContractMethod<
    [
      user: AddressLike,
      trashType: string,
      weightInGrams: BigNumberish,
      imageHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectTrashBatch"
  ): TypedContractMethod<
    [
      users: AddressLike[],
      trashTypes_: string[],
      weights: BigNumberish[],
      imageHashes: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllStations"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllTrashTypes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalTrashCollected: bigint;
        _totalRewardsDistributed: bigint;
        _totalUsers: bigint;
        totalStations: bigint;
        totalTrashTypes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentCollections"
  ): TypedContractMethod<
    [limit: BigNumberish],
    [TrashCollection.CollectionEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStationStats"
  ): TypedContractMethod<
    [station: AddressLike],
    [[bigint, boolean] & { totalCollected: bigint; authorized: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrashType"
  ): TypedContractMethod<
    [trashType: string],
    [TrashCollection.TrashTypeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrashTypeDistribution"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { types: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCollectionHistory"
  ): TypedContractMethod<
    [user: AddressLike],
    [TrashCollection.CollectionEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalCollections: bigint;
        totalWeight: bigint;
        totalEarned: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeStation"
  ): TypedContractMethod<[station: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stationAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stationTotalCollected"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "takaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRewardsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTrashCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trashTypeNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "trashTypeTotal"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "trashTypes"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean] & {
        name: string;
        rewardPerKg: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTrashType"
  ): TypedContractMethod<
    [trashType: string, newRewardPerKg: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCollections"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        user: string;
        station: string;
        trashType: string;
        weight: bigint;
        reward: bigint;
        timestamp: bigint;
        imageHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "StationAuthorized"
  ): TypedContractEvent<
    StationAuthorizedEvent.InputTuple,
    StationAuthorizedEvent.OutputTuple,
    StationAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "StationRevoked"
  ): TypedContractEvent<
    StationRevokedEvent.InputTuple,
    StationRevokedEvent.OutputTuple,
    StationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TrashCollected"
  ): TypedContractEvent<
    TrashCollectedEvent.InputTuple,
    TrashCollectedEvent.OutputTuple,
    TrashCollectedEvent.OutputObject
  >;
  getEvent(
    key: "TrashTypeAdded"
  ): TypedContractEvent<
    TrashTypeAddedEvent.InputTuple,
    TrashTypeAddedEvent.OutputTuple,
    TrashTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrashTypeUpdated"
  ): TypedContractEvent<
    TrashTypeUpdatedEvent.InputTuple,
    TrashTypeUpdatedEvent.OutputTuple,
    TrashTypeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "StationAuthorized(address,string)": TypedContractEvent<
      StationAuthorizedEvent.InputTuple,
      StationAuthorizedEvent.OutputTuple,
      StationAuthorizedEvent.OutputObject
    >;
    StationAuthorized: TypedContractEvent<
      StationAuthorizedEvent.InputTuple,
      StationAuthorizedEvent.OutputTuple,
      StationAuthorizedEvent.OutputObject
    >;

    "StationRevoked(address)": TypedContractEvent<
      StationRevokedEvent.InputTuple,
      StationRevokedEvent.OutputTuple,
      StationRevokedEvent.OutputObject
    >;
    StationRevoked: TypedContractEvent<
      StationRevokedEvent.InputTuple,
      StationRevokedEvent.OutputTuple,
      StationRevokedEvent.OutputObject
    >;

    "TrashCollected(address,address,string,uint256,uint256,uint256)": TypedContractEvent<
      TrashCollectedEvent.InputTuple,
      TrashCollectedEvent.OutputTuple,
      TrashCollectedEvent.OutputObject
    >;
    TrashCollected: TypedContractEvent<
      TrashCollectedEvent.InputTuple,
      TrashCollectedEvent.OutputTuple,
      TrashCollectedEvent.OutputObject
    >;

    "TrashTypeAdded(string,uint256)": TypedContractEvent<
      TrashTypeAddedEvent.InputTuple,
      TrashTypeAddedEvent.OutputTuple,
      TrashTypeAddedEvent.OutputObject
    >;
    TrashTypeAdded: TypedContractEvent<
      TrashTypeAddedEvent.InputTuple,
      TrashTypeAddedEvent.OutputTuple,
      TrashTypeAddedEvent.OutputObject
    >;

    "TrashTypeUpdated(string,uint256,bool)": TypedContractEvent<
      TrashTypeUpdatedEvent.InputTuple,
      TrashTypeUpdatedEvent.OutputTuple,
      TrashTypeUpdatedEvent.OutputObject
    >;
    TrashTypeUpdated: TypedContractEvent<
      TrashTypeUpdatedEvent.InputTuple,
      TrashTypeUpdatedEvent.OutputTuple,
      TrashTypeUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserRegistered(address)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
