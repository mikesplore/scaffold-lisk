/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TakaInvestment {
  export type InvestmentOpportunityStruct = {
    id: BigNumberish;
    name: string;
    description: string;
    location: string;
    targetAmount: BigNumberish;
    raisedAmount: BigNumberish;
    minInvestment: BigNumberish;
    expectedReturn: BigNumberish;
    duration: BigNumberish;
    deadline: BigNumberish;
    beneficiary: AddressLike;
    investmentType: BigNumberish;
    status: BigNumberish;
  };

  export type InvestmentOpportunityStructOutput = [
    id: bigint,
    name: string,
    description: string,
    location: string,
    targetAmount: bigint,
    raisedAmount: bigint,
    minInvestment: bigint,
    expectedReturn: bigint,
    duration: bigint,
    deadline: bigint,
    beneficiary: string,
    investmentType: bigint,
    status: bigint
  ] & {
    id: bigint;
    name: string;
    description: string;
    location: string;
    targetAmount: bigint;
    raisedAmount: bigint;
    minInvestment: bigint;
    expectedReturn: bigint;
    duration: bigint;
    deadline: bigint;
    beneficiary: string;
    investmentType: bigint;
    status: bigint;
  };
}

export interface TakaInvestmentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeOpportunityIds"
      | "cancelOpportunity"
      | "completeOpportunity"
      | "createInvestmentOpportunity"
      | "distributeReturns"
      | "emergencyWithdraw"
      | "getActiveOpportunities"
      | "getGlobalStats"
      | "getInvestorInvestments"
      | "getInvestorStats"
      | "getOpportunitiesByType"
      | "getOpportunity"
      | "invest"
      | "investments"
      | "investorInvestments"
      | "investorTotalInvested"
      | "nextInvestmentId"
      | "nextOpportunityId"
      | "opportunities"
      | "owner"
      | "pause"
      | "paused"
      | "registeredInvestors"
      | "renounceOwnership"
      | "takaToken"
      | "totalInvestmentAmount"
      | "totalInvestmentOpportunities"
      | "totalInvestors"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InvestmentMade"
      | "InvestorRegistered"
      | "OpportunityCompleted"
      | "OpportunityCreated"
      | "OpportunityFunded"
      | "OwnershipTransferred"
      | "Paused"
      | "ReturnsDistributed"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeOpportunityIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOpportunity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOpportunity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInvestmentOpportunity",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReturns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveOpportunities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorInvestments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpportunitiesByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpportunity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorInvestments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorTotalInvested",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextInvestmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOpportunityId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opportunities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registeredInvestors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "takaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalInvestmentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestmentOpportunities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activeOpportunityIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOpportunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOpportunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvestmentOpportunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveOpportunities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpportunitiesByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpportunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorTotalInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextInvestmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOpportunityId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opportunities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestmentOpportunities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    opportunityId: BigNumberish,
    investmentId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    opportunityId: bigint,
    investmentId: bigint,
    investor: string,
    amount: bigint
  ];
  export interface OutputObject {
    opportunityId: bigint;
    investmentId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorRegisteredEvent {
  export type InputTuple = [investor: AddressLike];
  export type OutputTuple = [investor: string];
  export interface OutputObject {
    investor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpportunityCompletedEvent {
  export type InputTuple = [opportunityId: BigNumberish];
  export type OutputTuple = [opportunityId: bigint];
  export interface OutputObject {
    opportunityId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpportunityCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    targetAmount: BigNumberish,
    investmentType: BigNumberish,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    targetAmount: bigint,
    investmentType: bigint,
    beneficiary: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    targetAmount: bigint;
    investmentType: bigint;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpportunityFundedEvent {
  export type InputTuple = [
    opportunityId: BigNumberish,
    totalRaised: BigNumberish
  ];
  export type OutputTuple = [opportunityId: bigint, totalRaised: bigint];
  export interface OutputObject {
    opportunityId: bigint;
    totalRaised: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnsDistributedEvent {
  export type InputTuple = [
    opportunityId: BigNumberish,
    totalReturns: BigNumberish
  ];
  export type OutputTuple = [opportunityId: bigint, totalReturns: bigint];
  export interface OutputObject {
    opportunityId: bigint;
    totalReturns: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TakaInvestment extends BaseContract {
  connect(runner?: ContractRunner | null): TakaInvestment;
  waitForDeployment(): Promise<this>;

  interface: TakaInvestmentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeOpportunityIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  cancelOpportunity: TypedContractMethod<
    [opportunityId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeOpportunity: TypedContractMethod<
    [opportunityId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createInvestmentOpportunity: TypedContractMethod<
    [
      name: string,
      description: string,
      location: string,
      targetAmount: BigNumberish,
      minInvestment: BigNumberish,
      expectedReturn: BigNumberish,
      duration: BigNumberish,
      fundraisingPeriod: BigNumberish,
      beneficiary: AddressLike,
      investmentType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  distributeReturns: TypedContractMethod<
    [opportunityId: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getActiveOpportunities: TypedContractMethod<[], [bigint[]], "view">;

  getGlobalStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalOpportunities: bigint;
        _totalInvestmentAmount: bigint;
        _totalInvestors: bigint;
        activeOpportunities: bigint;
      }
    ],
    "view"
  >;

  getInvestorInvestments: TypedContractMethod<
    [investor: AddressLike],
    [bigint[]],
    "view"
  >;

  getInvestorStats: TypedContractMethod<
    [investor: AddressLike],
    [
      [bigint, bigint, boolean] & {
        totalInvested: bigint;
        numberOfInvestments: bigint;
        registered: boolean;
      }
    ],
    "view"
  >;

  getOpportunitiesByType: TypedContractMethod<
    [investmentType: BigNumberish],
    [bigint[]],
    "view"
  >;

  getOpportunity: TypedContractMethod<
    [opportunityId: BigNumberish],
    [TakaInvestment.InvestmentOpportunityStructOutput],
    "view"
  >;

  invest: TypedContractMethod<[opportunityId: BigNumberish], [void], "payable">;

  investments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        opportunityId: bigint;
        investor: string;
        amount: bigint;
        timestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  investorInvestments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  investorTotalInvested: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  nextInvestmentId: TypedContractMethod<[], [bigint], "view">;

  nextOpportunityId: TypedContractMethod<[], [bigint], "view">;

  opportunities: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        name: string;
        description: string;
        location: string;
        targetAmount: bigint;
        raisedAmount: bigint;
        minInvestment: bigint;
        expectedReturn: bigint;
        duration: bigint;
        deadline: bigint;
        beneficiary: string;
        investmentType: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registeredInvestors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  takaToken: TypedContractMethod<[], [string], "view">;

  totalInvestmentAmount: TypedContractMethod<[], [bigint], "view">;

  totalInvestmentOpportunities: TypedContractMethod<[], [bigint], "view">;

  totalInvestors: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeOpportunityIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelOpportunity"
  ): TypedContractMethod<[opportunityId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeOpportunity"
  ): TypedContractMethod<[opportunityId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createInvestmentOpportunity"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      location: string,
      targetAmount: BigNumberish,
      minInvestment: BigNumberish,
      expectedReturn: BigNumberish,
      duration: BigNumberish,
      fundraisingPeriod: BigNumberish,
      beneficiary: AddressLike,
      investmentType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeReturns"
  ): TypedContractMethod<[opportunityId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveOpportunities"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalOpportunities: bigint;
        _totalInvestmentAmount: bigint;
        _totalInvestors: bigint;
        activeOpportunities: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvestorInvestments"
  ): TypedContractMethod<[investor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getInvestorStats"
  ): TypedContractMethod<
    [investor: AddressLike],
    [
      [bigint, bigint, boolean] & {
        totalInvested: bigint;
        numberOfInvestments: bigint;
        registered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOpportunitiesByType"
  ): TypedContractMethod<[investmentType: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOpportunity"
  ): TypedContractMethod<
    [opportunityId: BigNumberish],
    [TakaInvestment.InvestmentOpportunityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[opportunityId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        opportunityId: bigint;
        investor: string;
        amount: bigint;
        timestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "investorInvestments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "investorTotalInvested"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextInvestmentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextOpportunityId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "opportunities"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        name: string;
        description: string;
        location: string;
        targetAmount: bigint;
        raisedAmount: bigint;
        minInvestment: bigint;
        expectedReturn: bigint;
        duration: bigint;
        deadline: bigint;
        beneficiary: string;
        investmentType: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registeredInvestors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "takaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalInvestmentAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvestmentOpportunities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "InvestorRegistered"
  ): TypedContractEvent<
    InvestorRegisteredEvent.InputTuple,
    InvestorRegisteredEvent.OutputTuple,
    InvestorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OpportunityCompleted"
  ): TypedContractEvent<
    OpportunityCompletedEvent.InputTuple,
    OpportunityCompletedEvent.OutputTuple,
    OpportunityCompletedEvent.OutputObject
  >;
  getEvent(
    key: "OpportunityCreated"
  ): TypedContractEvent<
    OpportunityCreatedEvent.InputTuple,
    OpportunityCreatedEvent.OutputTuple,
    OpportunityCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OpportunityFunded"
  ): TypedContractEvent<
    OpportunityFundedEvent.InputTuple,
    OpportunityFundedEvent.OutputTuple,
    OpportunityFundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnsDistributed"
  ): TypedContractEvent<
    ReturnsDistributedEvent.InputTuple,
    ReturnsDistributedEvent.OutputTuple,
    ReturnsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "InvestmentMade(uint256,uint256,address,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "InvestorRegistered(address)": TypedContractEvent<
      InvestorRegisteredEvent.InputTuple,
      InvestorRegisteredEvent.OutputTuple,
      InvestorRegisteredEvent.OutputObject
    >;
    InvestorRegistered: TypedContractEvent<
      InvestorRegisteredEvent.InputTuple,
      InvestorRegisteredEvent.OutputTuple,
      InvestorRegisteredEvent.OutputObject
    >;

    "OpportunityCompleted(uint256)": TypedContractEvent<
      OpportunityCompletedEvent.InputTuple,
      OpportunityCompletedEvent.OutputTuple,
      OpportunityCompletedEvent.OutputObject
    >;
    OpportunityCompleted: TypedContractEvent<
      OpportunityCompletedEvent.InputTuple,
      OpportunityCompletedEvent.OutputTuple,
      OpportunityCompletedEvent.OutputObject
    >;

    "OpportunityCreated(uint256,string,uint256,uint8,address)": TypedContractEvent<
      OpportunityCreatedEvent.InputTuple,
      OpportunityCreatedEvent.OutputTuple,
      OpportunityCreatedEvent.OutputObject
    >;
    OpportunityCreated: TypedContractEvent<
      OpportunityCreatedEvent.InputTuple,
      OpportunityCreatedEvent.OutputTuple,
      OpportunityCreatedEvent.OutputObject
    >;

    "OpportunityFunded(uint256,uint256)": TypedContractEvent<
      OpportunityFundedEvent.InputTuple,
      OpportunityFundedEvent.OutputTuple,
      OpportunityFundedEvent.OutputObject
    >;
    OpportunityFunded: TypedContractEvent<
      OpportunityFundedEvent.InputTuple,
      OpportunityFundedEvent.OutputTuple,
      OpportunityFundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReturnsDistributed(uint256,uint256)": TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;
    ReturnsDistributed: TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
