/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TakaToken {
  export type RedemptionRequestStruct = {
    user: AddressLike;
    amount: BigNumberish;
    mpesaNumber: string;
    timestamp: BigNumberish;
    status: BigNumberish;
  };

  export type RedemptionRequestStructOutput = [
    user: string,
    amount: bigint,
    mpesaNumber: string,
    timestamp: bigint,
    status: bigint
  ] & {
    user: string;
    amount: bigint;
    mpesaNumber: string;
    timestamp: bigint;
    status: bigint;
  };
}

export interface TakaTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INITIAL_SUPPLY"
      | "MAX_SUPPLY"
      | "allowance"
      | "approve"
      | "authorizeRewarder"
      | "authorizedRewarders"
      | "balanceOf"
      | "calculateKesValue"
      | "calculateTakaValue"
      | "decimals"
      | "decreaseAllowance"
      | "getRedemptionRequest"
      | "getUserStats"
      | "increaseAllowance"
      | "kesExchangeRate"
      | "mintTrashReward"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "pendingRedemptions"
      | "processRedemption"
      | "redemptionRequests"
      | "renounceOwnership"
      | "requestRedemption"
      | "revokeRewarder"
      | "symbol"
      | "totalEarned"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updateExchangeRate"
      | "verifiedUsers"
      | "verifyUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ExchangeRateUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "RedemptionProcessed"
      | "RedemptionRequested"
      | "RewarderAuthorized"
      | "RewarderRevoked"
      | "Transfer"
      | "TrashRewardMinted"
      | "Unpaused"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeRewarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedRewarders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateKesValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTakaValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kesExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTrashReward",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRedemptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processRedemption",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedemption",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRewarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedRewarders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateKesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTakaValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kesExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTrashReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionProcessedEvent {
  export type InputTuple = [requestId: BytesLike, status: BigNumberish];
  export type OutputTuple = [requestId: string, status: bigint];
  export interface OutputObject {
    requestId: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    user: AddressLike,
    amount: BigNumberish,
    mpesaNumber: string
  ];
  export type OutputTuple = [
    requestId: string,
    user: string,
    amount: bigint,
    mpesaNumber: string
  ];
  export interface OutputObject {
    requestId: string;
    user: string;
    amount: bigint;
    mpesaNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewarderAuthorizedEvent {
  export type InputTuple = [rewarder: AddressLike];
  export type OutputTuple = [rewarder: string];
  export interface OutputObject {
    rewarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewarderRevokedEvent {
  export type InputTuple = [rewarder: AddressLike];
  export type OutputTuple = [rewarder: string];
  export interface OutputObject {
    rewarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrashRewardMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    trashType: string,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    trashType: string,
    weight: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    trashType: string;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TakaToken extends BaseContract {
  connect(runner?: ContractRunner | null): TakaToken;
  waitForDeployment(): Promise<this>;

  interface: TakaTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INITIAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizeRewarder: TypedContractMethod<
    [rewarder: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedRewarders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  calculateKesValue: TypedContractMethod<
    [takaAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateTakaValue: TypedContractMethod<
    [kesAmount: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getRedemptionRequest: TypedContractMethod<
    [requestId: BytesLike],
    [TakaToken.RedemptionRequestStructOutput],
    "view"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        balance: bigint;
        earned: bigint;
        pendingRedemption: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  kesExchangeRate: TypedContractMethod<[], [bigint], "view">;

  mintTrashReward: TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      trashType: string,
      weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingRedemptions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  processRedemption: TypedContractMethod<
    [requestId: BytesLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  redemptionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint, bigint] & {
        user: string;
        amount: bigint;
        mpesaNumber: string;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestRedemption: TypedContractMethod<
    [amount: BigNumberish, mpesaNumber: string],
    [string],
    "nonpayable"
  >;

  revokeRewarder: TypedContractMethod<
    [rewarder: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalEarned: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateExchangeRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifiedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verifyUser: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INITIAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeRewarder"
  ): TypedContractMethod<[rewarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedRewarders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateKesValue"
  ): TypedContractMethod<[takaAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTakaValue"
  ): TypedContractMethod<[kesAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRedemptionRequest"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [TakaToken.RedemptionRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        balance: bigint;
        earned: bigint;
        pendingRedemption: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kesExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTrashReward"
  ): TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      trashType: string,
      weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingRedemptions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processRedemption"
  ): TypedContractMethod<
    [requestId: BytesLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint, bigint] & {
        user: string;
        amount: bigint;
        mpesaNumber: string;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRedemption"
  ): TypedContractMethod<
    [amount: BigNumberish, mpesaNumber: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRewarder"
  ): TypedContractMethod<[rewarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalEarned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExchangeRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifiedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeRateUpdated"
  ): TypedContractEvent<
    ExchangeRateUpdatedEvent.InputTuple,
    ExchangeRateUpdatedEvent.OutputTuple,
    ExchangeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionProcessed"
  ): TypedContractEvent<
    RedemptionProcessedEvent.InputTuple,
    RedemptionProcessedEvent.OutputTuple,
    RedemptionProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRequested"
  ): TypedContractEvent<
    RedemptionRequestedEvent.InputTuple,
    RedemptionRequestedEvent.OutputTuple,
    RedemptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RewarderAuthorized"
  ): TypedContractEvent<
    RewarderAuthorizedEvent.InputTuple,
    RewarderAuthorizedEvent.OutputTuple,
    RewarderAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "RewarderRevoked"
  ): TypedContractEvent<
    RewarderRevokedEvent.InputTuple,
    RewarderRevokedEvent.OutputTuple,
    RewarderRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TrashRewardMinted"
  ): TypedContractEvent<
    TrashRewardMintedEvent.InputTuple,
    TrashRewardMintedEvent.OutputTuple,
    TrashRewardMintedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ExchangeRateUpdated(uint256)": TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;
    ExchangeRateUpdated: TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RedemptionProcessed(bytes32,uint8)": TypedContractEvent<
      RedemptionProcessedEvent.InputTuple,
      RedemptionProcessedEvent.OutputTuple,
      RedemptionProcessedEvent.OutputObject
    >;
    RedemptionProcessed: TypedContractEvent<
      RedemptionProcessedEvent.InputTuple,
      RedemptionProcessedEvent.OutputTuple,
      RedemptionProcessedEvent.OutputObject
    >;

    "RedemptionRequested(bytes32,address,uint256,string)": TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;
    RedemptionRequested: TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;

    "RewarderAuthorized(address)": TypedContractEvent<
      RewarderAuthorizedEvent.InputTuple,
      RewarderAuthorizedEvent.OutputTuple,
      RewarderAuthorizedEvent.OutputObject
    >;
    RewarderAuthorized: TypedContractEvent<
      RewarderAuthorizedEvent.InputTuple,
      RewarderAuthorizedEvent.OutputTuple,
      RewarderAuthorizedEvent.OutputObject
    >;

    "RewarderRevoked(address)": TypedContractEvent<
      RewarderRevokedEvent.InputTuple,
      RewarderRevokedEvent.OutputTuple,
      RewarderRevokedEvent.OutputObject
    >;
    RewarderRevoked: TypedContractEvent<
      RewarderRevokedEvent.InputTuple,
      RewarderRevokedEvent.OutputTuple,
      RewarderRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TrashRewardMinted(address,uint256,string,uint256)": TypedContractEvent<
      TrashRewardMintedEvent.InputTuple,
      TrashRewardMintedEvent.OutputTuple,
      TrashRewardMintedEvent.OutputObject
    >;
    TrashRewardMinted: TypedContractEvent<
      TrashRewardMintedEvent.InputTuple,
      TrashRewardMintedEvent.OutputTuple,
      TrashRewardMintedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserVerified(address)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
