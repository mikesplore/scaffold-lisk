/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MemoStruct = {
  numCoffees: BigNumberish;
  userName: string;
  twitterHandle: string;
  message: string;
  time: BigNumberish;
  userAddress: AddressLike;
};

export type MemoStructOutput = [
  numCoffees: bigint,
  userName: string,
  twitterHandle: string,
  message: string,
  time: bigint,
  userAddress: string
] & {
  numCoffees: bigint;
  userName: string;
  twitterHandle: string;
  message: string;
  time: bigint;
  userAddress: string;
};

export interface BuyMeACoffeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyCoffee"
      | "getMemos"
      | "memos"
      | "modifyMemoMessage"
      | "owner"
      | "price"
      | "removeMemo"
      | "withdrawTips"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BuyMeACoffeeEvent" | "NewMemo"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyCoffee",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getMemos", values?: undefined): string;
  encodeFunctionData(functionFragment: "memos", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "modifyMemoMessage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMemo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTips",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyCoffee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMemos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyMemoMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeMemo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTips",
    data: BytesLike
  ): Result;
}

export namespace BuyMeACoffeeEventEvent {
  export type InputTuple = [buyer: AddressLike, price: BigNumberish];
  export type OutputTuple = [buyer: string, price: bigint];
  export interface OutputObject {
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMemoEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    time: BigNumberish,
    numCoffees: BigNumberish,
    userName: string,
    twitterHandle: string,
    message: string
  ];
  export type OutputTuple = [
    userAddress: string,
    time: bigint,
    numCoffees: bigint,
    userName: string,
    twitterHandle: string,
    message: string
  ];
  export interface OutputObject {
    userAddress: string;
    time: bigint;
    numCoffees: bigint;
    userName: string;
    twitterHandle: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BuyMeACoffee extends BaseContract {
  connect(runner?: ContractRunner | null): BuyMeACoffee;
  waitForDeployment(): Promise<this>;

  interface: BuyMeACoffeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyCoffee: TypedContractMethod<
    [
      numCoffees: BigNumberish,
      userName: string,
      twitterHandle: string,
      message: string
    ],
    [void],
    "payable"
  >;

  getMemos: TypedContractMethod<[], [MemoStructOutput[]], "view">;

  memos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, string] & {
        numCoffees: bigint;
        userName: string;
        twitterHandle: string;
        message: string;
        time: bigint;
        userAddress: string;
      }
    ],
    "view"
  >;

  modifyMemoMessage: TypedContractMethod<
    [index: BigNumberish, message: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  removeMemo: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  withdrawTips: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyCoffee"
  ): TypedContractMethod<
    [
      numCoffees: BigNumberish,
      userName: string,
      twitterHandle: string,
      message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMemos"
  ): TypedContractMethod<[], [MemoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "memos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, string] & {
        numCoffees: bigint;
        userName: string;
        twitterHandle: string;
        message: string;
        time: bigint;
        userAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "modifyMemoMessage"
  ): TypedContractMethod<
    [index: BigNumberish, message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeMemo"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTips"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BuyMeACoffeeEvent"
  ): TypedContractEvent<
    BuyMeACoffeeEventEvent.InputTuple,
    BuyMeACoffeeEventEvent.OutputTuple,
    BuyMeACoffeeEventEvent.OutputObject
  >;
  getEvent(
    key: "NewMemo"
  ): TypedContractEvent<
    NewMemoEvent.InputTuple,
    NewMemoEvent.OutputTuple,
    NewMemoEvent.OutputObject
  >;

  filters: {
    "BuyMeACoffeeEvent(address,uint256)": TypedContractEvent<
      BuyMeACoffeeEventEvent.InputTuple,
      BuyMeACoffeeEventEvent.OutputTuple,
      BuyMeACoffeeEventEvent.OutputObject
    >;
    BuyMeACoffeeEvent: TypedContractEvent<
      BuyMeACoffeeEventEvent.InputTuple,
      BuyMeACoffeeEventEvent.OutputTuple,
      BuyMeACoffeeEventEvent.OutputObject
    >;

    "NewMemo(address,uint256,uint256,string,string,string)": TypedContractEvent<
      NewMemoEvent.InputTuple,
      NewMemoEvent.OutputTuple,
      NewMemoEvent.OutputObject
    >;
    NewMemo: TypedContractEvent<
      NewMemoEvent.InputTuple,
      NewMemoEvent.OutputTuple,
      NewMemoEvent.OutputObject
    >;
  };
}
