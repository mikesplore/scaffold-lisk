/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TakaCommunity {
  export type CommunityMetricsStruct = {
    totalTrashCollected: BigNumberish;
    totalTokensDistributed: BigNumberish;
    totalUsers: BigNumberish;
    totalStations: BigNumberish;
    totalInvestments: BigNumberish;
    totalInvestmentAmount: BigNumberish;
    carbonFootprintReduced: BigNumberish;
    lastUpdated: BigNumberish;
  };

  export type CommunityMetricsStructOutput = [
    totalTrashCollected: bigint,
    totalTokensDistributed: bigint,
    totalUsers: bigint,
    totalStations: bigint,
    totalInvestments: bigint,
    totalInvestmentAmount: bigint,
    carbonFootprintReduced: bigint,
    lastUpdated: bigint
  ] & {
    totalTrashCollected: bigint;
    totalTokensDistributed: bigint;
    totalUsers: bigint;
    totalStations: bigint;
    totalInvestments: bigint;
    totalInvestmentAmount: bigint;
    carbonFootprintReduced: bigint;
    lastUpdated: bigint;
  };

  export type LeaderboardStruct = {
    topCollectors: AddressLike[];
    collectionAmounts: BigNumberish[];
    topInvestors: AddressLike[];
    investmentAmounts: BigNumberish[];
  };

  export type LeaderboardStructOutput = [
    topCollectors: string[],
    collectionAmounts: bigint[],
    topInvestors: string[],
    investmentAmounts: bigint[]
  ] & {
    topCollectors: string[];
    collectionAmounts: bigint[];
    topInvestors: string[];
    investmentAmounts: bigint[];
  };

  export type StationStruct = {
    name: string;
    location: string;
    stationAddress: AddressLike;
    totalCollected: BigNumberish;
    active: boolean;
    registrationDate: BigNumberish;
  };

  export type StationStructOutput = [
    name: string,
    location: string,
    stationAddress: string,
    totalCollected: bigint,
    active: boolean,
    registrationDate: bigint
  ] & {
    name: string;
    location: string;
    stationAddress: string;
    totalCollected: bigint;
    active: boolean;
    registrationDate: bigint;
  };

  export type UserProfileStruct = {
    name: string;
    location: string;
    verified: boolean;
    joinDate: BigNumberish;
    totalCollections: BigNumberish;
    totalWeight: BigNumberish;
    tokensEarned: BigNumberish;
    tokensRedeemed: BigNumberish;
    investmentsMade: BigNumberish;
    totalInvested: BigNumberish;
    userType: BigNumberish;
  };

  export type UserProfileStructOutput = [
    name: string,
    location: string,
    verified: boolean,
    joinDate: bigint,
    totalCollections: bigint,
    totalWeight: bigint,
    tokensEarned: bigint,
    tokensRedeemed: bigint,
    investmentsMade: bigint,
    totalInvested: bigint,
    userType: bigint
  ] & {
    name: string;
    location: string;
    verified: boolean;
    joinDate: bigint;
    totalCollections: bigint;
    totalWeight: bigint;
    tokensEarned: bigint;
    tokensRedeemed: bigint;
    investmentsMade: bigint;
    totalInvested: bigint;
    userType: bigint;
  };
}

export interface TakaCommunityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "communityMetrics"
      | "getAllStations"
      | "getAllUsers"
      | "getCommunityMetrics"
      | "getEnvironmentalImpact"
      | "getImpactMetrics"
      | "getLeaderboard"
      | "getStation"
      | "getTotalStations"
      | "getTotalUsers"
      | "getUserProfile"
      | "impactMetrics"
      | "isUserVerified"
      | "owner"
      | "registerStation"
      | "registeredStations"
      | "registeredUsers"
      | "renounceOwnership"
      | "setStationStatus"
      | "stations"
      | "takaInvestment"
      | "takaToken"
      | "transferOwnership"
      | "trashCollection"
      | "updateCommunityMetrics"
      | "updateImpactMetric"
      | "updateUserProfile"
      | "updateUserStats"
      | "userProfiles"
      | "verifyUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImpactCalculated"
      | "MetricsUpdated"
      | "OwnershipTransferred"
      | "StationRegistered"
      | "UserProfileUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "communityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnvironmentalImpact",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImpactMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "impactMetrics",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStation",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredStations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStationStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takaInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "takaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trashCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommunityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateImpactMetric",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserProfile",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "communityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnvironmentalImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImpactMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impactMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takaInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trashCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommunityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImpactMetric",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;
}

export namespace ImpactCalculatedEvent {
  export type InputTuple = [
    carbonSaved: BigNumberish,
    wasteReduced: BigNumberish
  ];
  export type OutputTuple = [carbonSaved: bigint, wasteReduced: bigint];
  export interface OutputObject {
    carbonSaved: bigint;
    wasteReduced: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsUpdatedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StationRegisteredEvent {
  export type InputTuple = [
    station: AddressLike,
    name: string,
    location: string
  ];
  export type OutputTuple = [station: string, name: string, location: string];
  export interface OutputObject {
    station: string;
    name: string;
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserProfileUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    name: string,
    userType: BigNumberish
  ];
  export type OutputTuple = [user: string, name: string, userType: bigint];
  export interface OutputObject {
    user: string;
    name: string;
    userType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TakaCommunity extends BaseContract {
  connect(runner?: ContractRunner | null): TakaCommunity;
  waitForDeployment(): Promise<this>;

  interface: TakaCommunityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  communityMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalTrashCollected: bigint;
        totalTokensDistributed: bigint;
        totalUsers: bigint;
        totalStations: bigint;
        totalInvestments: bigint;
        totalInvestmentAmount: bigint;
        carbonFootprintReduced: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  getAllStations: TypedContractMethod<[], [string[]], "view">;

  getAllUsers: TypedContractMethod<[], [string[]], "view">;

  getCommunityMetrics: TypedContractMethod<
    [],
    [TakaCommunity.CommunityMetricsStructOutput],
    "view"
  >;

  getEnvironmentalImpact: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalWasteRecycled: bigint;
        carbonFootprintReduced: bigint;
        estimatedTreesSaved: bigint;
        waterSaved: bigint;
      }
    ],
    "view"
  >;

  getImpactMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        plasticBottles: bigint;
        paperRecycled: bigint;
        metalRecycled: bigint;
        glassRecycled: bigint;
        organicComposted: bigint;
      }
    ],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [limit: BigNumberish],
    [TakaCommunity.LeaderboardStructOutput],
    "view"
  >;

  getStation: TypedContractMethod<
    [stationAddress: AddressLike],
    [TakaCommunity.StationStructOutput],
    "view"
  >;

  getTotalStations: TypedContractMethod<[], [bigint], "view">;

  getTotalUsers: TypedContractMethod<[], [bigint], "view">;

  getUserProfile: TypedContractMethod<
    [user: AddressLike],
    [TakaCommunity.UserProfileStructOutput],
    "view"
  >;

  impactMetrics: TypedContractMethod<[arg0: string], [bigint], "view">;

  isUserVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerStation: TypedContractMethod<
    [stationAddress: AddressLike, name: string, location: string],
    [void],
    "nonpayable"
  >;

  registeredStations: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  registeredUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setStationStatus: TypedContractMethod<
    [stationAddress: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  stations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, bigint] & {
        name: string;
        location: string;
        stationAddress: string;
        totalCollected: bigint;
        active: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  takaInvestment: TypedContractMethod<[], [string], "view">;

  takaToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trashCollection: TypedContractMethod<[], [string], "view">;

  updateCommunityMetrics: TypedContractMethod<[], [void], "nonpayable">;

  updateImpactMetric: TypedContractMethod<
    [metricName: string, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUserProfile: TypedContractMethod<
    [name: string, location: string, userType: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUserStats: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  userProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        location: string;
        verified: boolean;
        joinDate: bigint;
        totalCollections: bigint;
        totalWeight: bigint;
        tokensEarned: bigint;
        tokensRedeemed: bigint;
        investmentsMade: bigint;
        totalInvested: bigint;
        userType: bigint;
      }
    ],
    "view"
  >;

  verifyUser: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "communityMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalTrashCollected: bigint;
        totalTokensDistributed: bigint;
        totalUsers: bigint;
        totalStations: bigint;
        totalInvestments: bigint;
        totalInvestmentAmount: bigint;
        carbonFootprintReduced: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllStations"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCommunityMetrics"
  ): TypedContractMethod<
    [],
    [TakaCommunity.CommunityMetricsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnvironmentalImpact"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalWasteRecycled: bigint;
        carbonFootprintReduced: bigint;
        estimatedTreesSaved: bigint;
        waterSaved: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getImpactMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        plasticBottles: bigint;
        paperRecycled: bigint;
        metalRecycled: bigint;
        glassRecycled: bigint;
        organicComposted: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [limit: BigNumberish],
    [TakaCommunity.LeaderboardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStation"
  ): TypedContractMethod<
    [stationAddress: AddressLike],
    [TakaCommunity.StationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserProfile"
  ): TypedContractMethod<
    [user: AddressLike],
    [TakaCommunity.UserProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "impactMetrics"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isUserVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerStation"
  ): TypedContractMethod<
    [stationAddress: AddressLike, name: string, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredStations"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStationStatus"
  ): TypedContractMethod<
    [stationAddress: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, bigint] & {
        name: string;
        location: string;
        stationAddress: string;
        totalCollected: bigint;
        active: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "takaInvestment"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "takaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trashCollection"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateCommunityMetrics"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateImpactMetric"
  ): TypedContractMethod<
    [metricName: string, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserProfile"
  ): TypedContractMethod<
    [name: string, location: string, userType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserStats"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        location: string;
        verified: boolean;
        joinDate: bigint;
        totalCollections: bigint;
        totalWeight: bigint;
        tokensEarned: bigint;
        tokensRedeemed: bigint;
        investmentsMade: bigint;
        totalInvested: bigint;
        userType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ImpactCalculated"
  ): TypedContractEvent<
    ImpactCalculatedEvent.InputTuple,
    ImpactCalculatedEvent.OutputTuple,
    ImpactCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "MetricsUpdated"
  ): TypedContractEvent<
    MetricsUpdatedEvent.InputTuple,
    MetricsUpdatedEvent.OutputTuple,
    MetricsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StationRegistered"
  ): TypedContractEvent<
    StationRegisteredEvent.InputTuple,
    StationRegisteredEvent.OutputTuple,
    StationRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserProfileUpdated"
  ): TypedContractEvent<
    UserProfileUpdatedEvent.InputTuple,
    UserProfileUpdatedEvent.OutputTuple,
    UserProfileUpdatedEvent.OutputObject
  >;

  filters: {
    "ImpactCalculated(uint256,uint256)": TypedContractEvent<
      ImpactCalculatedEvent.InputTuple,
      ImpactCalculatedEvent.OutputTuple,
      ImpactCalculatedEvent.OutputObject
    >;
    ImpactCalculated: TypedContractEvent<
      ImpactCalculatedEvent.InputTuple,
      ImpactCalculatedEvent.OutputTuple,
      ImpactCalculatedEvent.OutputObject
    >;

    "MetricsUpdated(uint256)": TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;
    MetricsUpdated: TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StationRegistered(address,string,string)": TypedContractEvent<
      StationRegisteredEvent.InputTuple,
      StationRegisteredEvent.OutputTuple,
      StationRegisteredEvent.OutputObject
    >;
    StationRegistered: TypedContractEvent<
      StationRegisteredEvent.InputTuple,
      StationRegisteredEvent.OutputTuple,
      StationRegisteredEvent.OutputObject
    >;

    "UserProfileUpdated(address,string,uint8)": TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;
    UserProfileUpdated: TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;
  };
}
